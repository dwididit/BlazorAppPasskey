@page "/"
@using BlazorAppPasskey.Services
@rendermode InteractiveServer
@inject PasskeyAuthService AuthService

<PageTitle>Login - BlazorAppPasskey</PageTitle>

<div class="login-container">
    <div class="login-card">
        <div class="login-header">
            <h1>Welcome Back</h1>
            <p class="subtitle">Sign in to your account</p>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
        }

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success" role="alert">
                @successMessage
            </div>
        }

        <div class="login-form">
            <div class="mb-3">
                <label for="username" class="form-label">Username or Email</label>
                <input type="text" class="form-control" id="username" @bind="username" placeholder="Enter your username" />
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <input type="password" class="form-control" id="password" @bind="password" placeholder="Enter your password" />
            </div>

            <div class="mb-3 form-check">
                <input type="checkbox" class="form-check-input" id="rememberMe" @bind="rememberMe" />
                <label class="form-check-label" for="rememberMe">
                    Remember me
                </label>
            </div>

            <button class="btn btn-primary w-100 mb-3" @onclick="LoginWithPassword" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                }
                Sign In
            </button>

            <div class="divider">
                <span>OR</span>
            </div>

            <button class="btn btn-outline-primary w-100 passkey-btn" @onclick="LoginWithPasskey" disabled="@isLoading">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-shield-lock me-2" viewBox="0 0 16 16">
                    <path d="M5.338 1.59a61.44 61.44 0 0 0-2.837.856.481.481 0 0 0-.328.39c-.554 4.157.726 7.19 2.253 9.188a10.725 10.725 0 0 0 2.287 2.233c.346.244.652.42.893.533.12.057.218.095.293.118a.55.55 0 0 0 .101.025.615.615 0 0 0 .1-.025c.076-.023.174-.061.294-.118.24-.113.547-.29.893-.533a10.726 10.726 0 0 0 2.287-2.233c1.527-1.997 2.807-5.031 2.253-9.188a.48.48 0 0 0-.328-.39c-.651-.213-1.75-.56-2.837-.855C9.552 1.29 8.531 1.067 8 1.067c-.53 0-1.552.223-2.662.524zM5.072.56C6.157.265 7.31 0 8 0s1.843.265 2.928.56c1.11.3 2.229.655 2.887.87a1.54 1.54 0 0 1 1.044 1.262c.596 4.477-.787 7.795-2.465 9.99a11.775 11.775 0 0 1-2.517 2.453 7.159 7.159 0 0 1-1.048.625c-.28.132-.581.24-.829.24s-.548-.108-.829-.24a7.158 7.158 0 0 1-1.048-.625 11.777 11.777 0 0 1-2.517-2.453C1.928 10.487.545 7.169 1.141 2.692A1.54 1.54 0 0 1 2.185 1.43 62.456 62.456 0 0 1 5.072.56z"/>
                    <path d="M9.5 6.5a1.5 1.5 0 0 1-1 1.415l.385 1.99a.5.5 0 0 1-.491.595h-.788a.5.5 0 0 1-.49-.595l.384-1.99a1.5 1.5 0 1 1 2-1.415z"/>
                </svg>
                Sign in with Passkey
            </button>

            <button class="btn btn-outline-secondary w-100 mt-2" @onclick="RegisterPasskey" disabled="@isLoading">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-person-plus me-2" viewBox="0 0 16 16">
                    <path d="M6 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0zm4 8c0 1-1 1-1 1H1s-1 0-1-1 1-4 6-4 6 3 6 4zm-1-.004c-.001-.246-.154-.986-.832-1.664C9.516 10.68 8.289 10 6 10c-2.29 0-3.516.68-4.168 1.332-.678.678-.83 1.418-.832 1.664h10z"/>
                    <path fill-rule="evenodd" d="M13.5 5a.5.5 0 0 1 .5.5V7h1.5a.5.5 0 0 1 0 1H14v1.5a.5.5 0 0 1-1 0V8h-1.5a.5.5 0 0 1 0-1H13V5.5a.5.5 0 0 1 .5-.5z"/>
                </svg>
                Register New Passkey
            </button>

            <div class="mt-4 text-center">
                <a href="#" class="text-decoration-none">Forgot password?</a>
            </div>
        </div>
    </div>
</div>

<style>
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        padding: 2rem 1rem;
    }

    .login-card {
        background: #ffffff;
        border-radius: 8px;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        padding: 2.5rem;
        max-width: 440px;
        width: 100%;
        border: 1px solid #dee2e6;
    }

    .login-header {
        text-align: center;
        margin-bottom: 2rem;
    }

    .login-header h1 {
        font-size: 2rem;
        font-weight: 600;
        color: #212529;
        margin-bottom: 0.5rem;
    }

    .subtitle {
        color: #6c757d;
        font-size: 1rem;
        margin: 0;
    }

    .divider {
        position: relative;
        text-align: center;
        margin: 1.5rem 0;
    }

    .divider::before {
        content: '';
        position: absolute;
        top: 50%;
        left: 0;
        right: 0;
        height: 1px;
        background: #dee2e6;
    }

    .divider span {
        background: #ffffff;
        padding: 0 1rem;
        position: relative;
        color: #6c757d;
        font-size: 0.875rem;
        font-weight: 500;
    }

    .passkey-btn {
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 500;
    }
</style>

@code {
    private string username = "";
    private string password = "";
    private bool rememberMe = false;
    private bool isLoading = false;
    private string errorMessage = "";
    private string successMessage = "";

    private async Task LoginWithPassword()
    {
        isLoading = true;
        errorMessage = "";
        successMessage = "";

        try
        {
            var result = await AuthService.AuthenticateWithPasswordAsync(username, password);

            if (result.Success)
            {
                successMessage = result.Message;
            }
            else
            {
                errorMessage = result.ErrorMessage;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Login failed: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoginWithPasskey()
    {
        isLoading = true;
        errorMessage = "";
        successMessage = "";

        try
        {
            var result = await AuthService.AuthenticateWithPasskeyAsync(username);

            if (result.Success)
            {
                successMessage = result.Message;
            }
            else
            {
                errorMessage = result.ErrorMessage;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Passkey authentication failed: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RegisterPasskey()
    {
        isLoading = true;
        errorMessage = "";
        successMessage = "";

        try
        {
            var result = await AuthService.RegisterPasskeyAsync(username);

            if (result.Success)
            {
                successMessage = result.Message;
            }
            else
            {
                errorMessage = result.ErrorMessage;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Passkey registration failed: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}